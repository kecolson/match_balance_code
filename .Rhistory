ESTIMATORS.weighted<- function(O, pscore=NA) {
unadj<- gcomp<- iptw.ate.pnew<- iptw.att.pnew<- iptw.ate.pold<- iptw.att.pol<- tmle.pnew<- tmle.pold<- NA
## Unadjusted
unadj<- mean(O$Y.star[O$A==1]) - mean(O$Y.star[O$A==0])
### gcomp with misp linear
txt<- control <- O
txt$A <-1;  control$A <- 0
reg.model <- glm(Y.star~ A +W2+W1, data=O, weights=O$weights)
gcomp<- mean(predict(reg.model, newdata = txt, type='response')) -
mean(predict(reg.model, newdata = control, type='response'))
### IPTW for ATE, new propensity score
g.model<- glm(A~ W1 + W2, family='binomial', data=O)
g.pred<- predict(g.model, type='resp')
O$iptw.weights[O$A==1] <- 1/g.pred[O$A==1]*O$weights[O$A==1]
O$iptw.weights[O$A==0] <- 1/(1-g.pred[O$A==0])*O$weights[O$A==0]
iptw.model <- glm(Y.star ~ A, data=O, weights=O$iptw.weights)
iptw.ate.pnew <- mean(predict(iptw.model, newdata = txt, type='response')) -
mean(predict(iptw.model, newdata = control, type='response'))
### IPTW for ATT, new propensity score
O$iptw.weights[O$A==1] <- 1*O$weights[O$A==1]
O$iptw.weights[O$A==0] <- g.pred[O$A==0]/(1-g.pred[O$A==0])*O$weights[O$A==0]
iptw.model <- glm(Y.star ~ A, data=O, weights=O$iptw.weights)
iptw.att.pnew <- mean(predict(iptw.model, newdata = txt, type='response')) -
mean(predict(iptw.model, newdata = control, type='response'))
if (!is.na(pscore[1])) {
### IPTW for ATE, old propensity score
O$iptw.weights[O$A==1] <- 1/pscore[O$A==1]*O$weights[O$A==1]
O$iptw.weights[O$A==0] <- 1/(1-pscore[O$A==0])*O$weights[O$A==0]
iptw.model <- glm(Y.star ~ A, data=O, weights=O$iptw.weights)
iptw.ate.pold <- mean(predict(iptw.model, newdata = txt, type='response')) - mean(predict(iptw.model, newdata = control, type='response'))
### IPTW for ATT, old propensity score
O$iptw.weights[O$A==1] <- 1*O$weights[O$A==1]
O$iptw.weights[O$A==0] <- pscore[O$A==0]/(1-pscore[O$A==0])*O$weights[O$A==0]
iptw.model <- glm(Y.star ~ A, data=O, weights=O$iptw.weights)
iptw.att.pold <- mean(predict(iptw.model, newdata = txt, type='response')) - mean(predict(iptw.model, newdata = control, type='response'))
}
# ### TMLE, new propensity score
library("tmle")
tmle.out<- tmle(Y=O$Y.star, A=O$A, W=cbind(O$W1, O$W2, O$W1sq, O$W2sq), Delta=rep(1,nrow(O)),
Q.SL.library = c("SL.glm", "SL.glm.interaction", "SL.step", "SL.step.interaction"),
g.SL.library = c("SL.glm", "SL.glm.interaction", "SL.step", "SL.step.interaction"),
pDelta1=cbind(1/O$weights,1/O$weights))
tmle.pnew <- sum(O$weights * (tmle.out$Qstar[,2] - tmle.out$Qstar[,1]))/sum(O$weights)
# ### TMLE, old propensity score
if (!is.na(pscore[1])) {
tmle.out<- tmle(Y=O$Y.star, A=O$A, W=cbind(O$W1, O$W2, O$W1sq, O$W2sq), Delta=rep(1,nrow(O)),
Q.SL.library = c("SL.glm", "SL.glm.interaction", "SL.step", "SL.step.interaction"),
g1W=pscore,
pDelta1=cbind(1/O$weights,1/O$weights))
tmle.pold <- sum(O$weights * (tmle.out$Qstar[,2] - tmle.out$Qstar[,1]))/sum(O$weights)
}
estimates<- c(unadj, gcomp, iptw.ate.pnew, iptw.att.pnew, iptw.ate.pold, iptw.att.pold, tmle.pnew, tmle.pold)
estimates
}
iteration <-1
n=10000
R= 100
index <- 1:R
ss <- 5000
# Balance:
# Standardized mean difference = abs(mean treated-mean control) / SD pooled
# % of vars below 20%, 10%, 5%  SMD
# generate the population
pop <- generateData(n=n, covars.norm=T, pscore.type = 1)
library("MatchIt")
library("SuperLearner")
library("Matching")
library("tmle")
library("Hmisc")
all<-  data.frame( matrix(NA, nrow=1, ncol=8))
colnames(all)<- c('unadj', 'gcomp','iptw.ate.pnew','iptw.att.pnew','iptw.ate.pold','iptw.att.pold', 'tmle.pnew','tmle.pold')
match.full <- match.sub <- match.gen <- match.sl <- match.nn <- match.opt<- all
bal <- data.frame(matrix(NA,nrow=1, ncol=14))
colnames(bal)<-paste0( rep(c("all.","match.full.","match.sub.","match.gen.","match.sl.","match.nn.","match.opt."),each=2), rep(c("W1","W2"),7) )
# Take a random (representative) sample from the population
sample <- pop[sample(row.names(pop),size=ss, replace=F),]
all <- ESTIMATORS(sample, pscore=NA)
bal.all.W1 <- (mean(sample$W1[sample$A==1]) - mean(sample$W1[sample$A==0])) / sqrt((var(sample$W1[sample$A==1]) + var(sample$W1[sample$A==0])) / 2)
bal.all.W2 <- (mean(sample$W2[sample$A==1]) - mean(sample$W2[sample$A==0])) / sqrt((var(sample$W2[sample$A==1]) + var(sample$W2[sample$A==0])) / 2)
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="nearest")))
try(Obs <- match.data(match))
try(match.nn<- ESTIMATORS(Obs, pscore=Obs$distance)) ## Estimation
try(bal$match.nn.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.nn.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="optimal")))
try(Obs <- match.data(match))
try(match.opt<- ESTIMATORS(Obs, pscore=Obs$distance))
try(bal$match.opt.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.opt.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
########
SL.out <- match <- m <- Obs <- NULL
SL.out <- SuperLearner(Y=sample$A, X=sample[,c("W1","W2")], SL.library=c("SL.glm", "SL.glm.interaction","SL.step", "SL.step.interaction"), family='binomial', cvControl=list(V=10))
try(match <- suppressWarnings(Match(Y=sample$Y.star, Tr=sample$A, X=SL.out$SL.predict, estimand ="ATE", replace = F, ties = F, M=1, version="fast")))
try(m <- MatchBalance(A~W1+W2, data=sample, match.out = match, nboots=10))
try(Obs <- rbind(sample[unique(match$index.treated),] , sample[unique(match$index.control),]))
try(match.sl<- ESTIMATORS(Obs, pscore=SL.out$SL.predict[row.names(sample) %in% row.names(Obs)]))
try(bal$match.sl.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.sl.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
#############
# 5. genetic
# Analysis much be weighted
#############
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="genetic")))
try(Obs <- match.data(match))
try(match.gen<- ESTIMATORS.weighted(Obs, pscore=Obs$distance))
try(bal$match.gen.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.gen.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="subclass", subclass=12)))
try(Obs <- match.data(match))
# Estimate within each subclass and then average across the subclasses
ests <- matrix(NA, nrow=12, ncol=8)
for (s in 1:12) {
try(ests[s,]<- ESTIMATORS.weighted(Obs[Obs$subclass==s,], pscore= Obs$distance[Obs$subclass==s]))
}
try(match.sub<- apply(ests,2, function(x) mean(x,na.rm=T)))
# Use weights for control obs
try(bal$match.sub.W1 <- (mean(Obs$W1[Obs$A==1]) - weighted.mean(Obs$W1[Obs$A==0], w=Obs$weights[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + wtd.var(Obs$W1[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2) )
try(bal$match.sub.W2 <- (mean(Obs$W2[Obs$A==1]) - weighted.mean(Obs$W2[Obs$A==0], w=Obs$weights[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + wtd.var(Obs$W2[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2)  )
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="full")))
try(Obs <- match.data(match))
try(match.full<- ESTIMATORS.weighted(Obs, pscore=Obs$distance))
# Use weights for control obs
try(bal$match.sub.W1 <- (mean(Obs$W1[Obs$A==1]) - weighted.mean(Obs$W1[Obs$A==0], w=Obs$weights[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + wtd.var(Obs$W1[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2) )
try(bal$match.sub.W2 <- (mean(Obs$W2[Obs$A==1]) - weighted.mean(Obs$W2[Obs$A==0], w=Obs$weights[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + wtd.var(Obs$W2[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2)  )
estimands<- cbind(all, match.nn, match.opt, match.sl, match.gen, match.sub, match.full)
names(estimands) <- paste0(rep(c("all.","match.nn.","match.opt.","match.sl.","match.gen.","match.sub.","match.full."), each=8),names(estimands))
results <- list(estimands = estimands, bal = bal)
results
all
class(all)
?cbind
c(all, match.nn, match.opt, match.sl, match.gen, match.sub, match.full)
estimands<- data.frame(all, match.nn, match.opt, match.sl, match.gen, match.sub, match.full)
estimands
estimands<- as.data.frame(c(all, match.nn, match.opt, match.sl, match.gen, match.sub, match.full))
estimands
estimands<- as.data.frame(t(c(all, match.nn, match.opt, match.sl, match.gen, match.sub, match.full)))
estimands
names(estimands) <- paste0(rep(c("all.","match.nn.","match.opt.","match.sl.","match.gen.","match.sub.","match.full."), each=8),names(estimands))
estimands
all
names(estimands) <- paste0(rep(c("all.","match.nn.","match.opt.","match.sl.","match.gen.","match.sub.","match.full."), each=8),c("unadj","gcomp","iptw.ate.pnew","iptw.att.pnew","iptw.ate.pold","iptw.att.pold","tmle.pnew","tmle.pold"))
estimands
estimands<- as.data.frame(t(c(all, match.nn, match.opt, match.sl, match.gen, match.sub, match.full)))
names(estimands) <- paste0(rep(c("all.","match.nn.","match.opt.","match.sl.","match.gen.","match.sub.","match.full."), each=8),c("unadj","gcomp","iptw.ate.pnew","iptw.att.pnew","iptw.ate.pold","iptw.att.pold","tmle.pnew","tmle.pold"))
results <- list(estimands = estimands, bal = bal)
results
n=10000
R <- 2
index <- 1:R
ss <- 1000
results <- lapply(index, outer.loop(index,pop), pop=pop)
#   input: pop (the population data from which to sample)
#   output: parameter estimates and balance metrics: estimands, bal
#--------
outer.loop <- function(iteration, pop) {
library("MatchIt")
library("SuperLearner")
library("Matching")
library("tmle")
library("Hmisc")
# Make matrices to put the results in
all<-  data.frame( matrix(NA, nrow=1, ncol=8))
colnames(all)<- c('unadj', 'gcomp','iptw.ate.pnew','iptw.att.pnew','iptw.ate.pold','iptw.att.pold', 'tmle.pnew','tmle.pold')
match.full <- match.sub <- match.gen <- match.sl <- match.nn <- match.opt<- all
bal <- data.frame(matrix(NA,nrow=1, ncol=14))
colnames(bal)<-paste0( rep(c("all.","match.full.","match.sub.","match.gen.","match.sl.","match.nn.","match.opt."),each=2), rep(c("W1","W2"),7) )
# Take a random (representative) sample from the population
sample <- pop[sample(row.names(pop),size=ss, replace=F),]
##############
# 1. ANALYZE THE SAMPLE AS IS
############
all <- ESTIMATORS(sample, pscore=NA)
bal.all.W1 <- (mean(sample$W1[sample$A==1]) - mean(sample$W1[sample$A==0])) / sqrt((var(sample$W1[sample$A==1]) + var(sample$W1[sample$A==0])) / 2)
bal.all.W2 <- (mean(sample$W2[sample$A==1]) - mean(sample$W2[sample$A==0])) / sqrt((var(sample$W2[sample$A==1]) + var(sample$W2[sample$A==0])) / 2)
#############
# Different matching designs
# Match on W1 (percent black) and W2 (baseline violence)
# Keep default support
##############
#############
# 2. Nearest neighbor matching
# Analysis does not need to be weighted
#############
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="nearest")))
try(Obs <- match.data(match))
try(match.nn<- ESTIMATORS(Obs, pscore=Obs$distance)) ## Estimation
try(bal$match.nn.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.nn.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
#############
# 3. Optimal matching
# Analysis does not need to be weighted
#############
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="optimal")))
try(Obs <- match.data(match))
try(match.opt<- ESTIMATORS(Obs, pscore=Obs$distance))
try(bal$match.opt.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.opt.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
#############
# 4. Estimate pscore with superlearner, then nearest neighbor match
# Analysis does not need to be weighted
#############
SL.out <- match <- m <- Obs <- NULL
SL.out <- SuperLearner(Y=sample$A, X=sample[,c("W1","W2")], SL.library=c("SL.glm", "SL.glm.interaction","SL.step", "SL.step.interaction"), family='binomial', cvControl=list(V=10))
try(match <- suppressWarnings(Match(Y=sample$Y.star, Tr=sample$A, X=SL.out$SL.predict, estimand ="ATE", replace = F, ties = F, M=1, version="fast")))
try(m <- MatchBalance(A~W1+W2, data=sample, match.out = match, nboots=10))
try(Obs <- rbind(sample[unique(match$index.treated),] , sample[unique(match$index.control),]))
try(match.sl<- ESTIMATORS(Obs, pscore=SL.out$SL.predict[row.names(sample) %in% row.names(Obs)]))
try(bal$match.sl.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.sl.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
#############
# 5. genetic
# Analysis much be weighted
#############
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="genetic")))
try(Obs <- match.data(match))
try(match.gen<- ESTIMATORS.weighted(Obs, pscore=Obs$distance))
try(bal$match.gen.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.gen.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
#############
# 6. subclassification
# Analysis must be weighted
# Analyses within each subclass, then average
#############
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="subclass", subclass=12)))
try(Obs <- match.data(match))
# Estimate within each subclass and then average across the subclasses
ests <- matrix(NA, nrow=12, ncol=8)
for (s in 1:12) {
try(ests[s,]<- ESTIMATORS.weighted(Obs[Obs$subclass==s,], pscore= Obs$distance[Obs$subclass==s]))
}
try(match.sub<- apply(ests,2, function(x) mean(x,na.rm=T)))
# Use weights for control obs
try(bal$match.sub.W1 <- (mean(Obs$W1[Obs$A==1]) - weighted.mean(Obs$W1[Obs$A==0], w=Obs$weights[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + wtd.var(Obs$W1[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2) )
try(bal$match.sub.W2 <- (mean(Obs$W2[Obs$A==1]) - weighted.mean(Obs$W2[Obs$A==0], w=Obs$weights[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + wtd.var(Obs$W2[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2)  )
#############
# 7. full
# Analysis needs to be weighted
# Sample sizes within each subclass are very small
# Estimate using weights
#############
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="full")))
try(Obs <- match.data(match))
try(match.full<- ESTIMATORS.weighted(Obs, pscore=Obs$distance))
# Use weights for control obs
try(bal$match.sub.W1 <- (mean(Obs$W1[Obs$A==1]) - weighted.mean(Obs$W1[Obs$A==0], w=Obs$weights[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + wtd.var(Obs$W1[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2) )
try(bal$match.sub.W2 <- (mean(Obs$W2[Obs$A==1]) - weighted.mean(Obs$W2[Obs$A==0], w=Obs$weights[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + wtd.var(Obs$W2[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2)  )
estimands<- as.data.frame(t(c(all, match.nn, match.opt, match.sl, match.gen, match.sub, match.full)))
names(estimands) <- paste0(rep(c("all.","match.nn.","match.opt.","match.sl.","match.gen.","match.sub.","match.full."), each=8),c("unadj","gcomp","iptw.ate.pnew","iptw.att.pnew","iptw.ate.pold","iptw.att.pold","tmle.pnew","tmle.pold"))
results <- list(estimands = estimands, bal = bal)
results
}
results <- lapply(index, outer.loop(iteration=index,pop), pop=pop)
results <- lapply(index, outer.loop, pop=pop)
head(results)
dim(results[[1]]$estimands)
dim(results[[1]]$bal)
for (r in 1:R) {
estimands[r,] <- results[[r]][[1]]
balance[r,]  <- results[[r]][[2]]
}
est <- matrix(NA,nrow=R,ncol=56)
balance <- matrix(NA,nrow=R,ncol=14)
for (r in 1:R) {
estimands[r,] <- results[[r]][[1]]
balance[r,]  <- results[[r]][[2]]
}
est <- matrix(NA,nrow=R,ncol=56)
balance <- matrix(NA,nrow=R,ncol=14)
for (r in 1:R) {
estimands[r,] <- results[[r]]$estimands
balance[r,]  <- results[[r]]$bal
}
est <- matrix(NA,nrow=R,ncol=56)
balance <- matrix(NA,nrow=R,ncol=14)
R
r <- 1
est <- matrix(NA,nrow=R,ncol=56)
balance <- matrix(NA,nrow=R,ncol=14)
for (r in 1:R) {
est[r,] <- results[[r]]$estimands
balance[r,]  <- results[[r]]$bal
}
est <- matrix(NA,nrow=R,ncol=56)
balance <- matrix(NA,nrow=R,ncol=14)
r <- 1
est[r,] <- results[[r]]$estimands
balance[r,]  <- results[[r]]$bal
r <-2
est[r,] <- results[[r]]$estimands
head(est)
class(est)
est <- matrix(NA,nrow=R,ncol=56)
class(est)
est
dim(est)
dim(results[[1]]$estimands)
class(results[[r]]$estimands)
results[[r]]$estimands
est <- matrix(NA,nrow=R,ncol=56)
est[r,] <- results[[r]]$estimands
est
est[r,] <- as.numeric(results[[r]]$estimands)
est <- matrix(NA,nrow=R,ncol=56)
est[r,] <- as.numeric(results[[r]]$estimands)
r
r <- 1
est[r,] <- as.numeric(results[[r]]$estimands)
est
est <- matrix(NA,nrow=R,ncol=56)
balance <- matrix(NA,nrow=R,ncol=14)
for (r in 1:R) {
est[r,] <- as.numeric(results[[r]]$estimands)
balance[r,]  <- as.numeric(results[[r]]$bal)
}
MSE.funct<- function( X, Xtrue) {
ave=mean(X, na.rm=T)
bias=mean(X- Xtrue, na.rm=T)
var = var(X, na.rm=T)
MSE = mean( (X-Xtrue)^2, na.rm=T)
c(ave,bias, var, MSE)
}
done.ate<- data.frame(apply(estimands, 2, MSE.funct, Xtrue=ATE))
row.names(done.ate)<- c('Ave', 'Bias', 'Var', 'MSE')
done.ate <- done.ate*10000
done.ate
done.att<- data.frame(apply(estimands, 2, MSE.funct, Xtrue=ATT))
row.names(done.att)<- c('Ave', 'Bias', 'Var', 'MSE')
done.att <- done.att*10000
done.att
balance
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="nearest")))
try(Obs <- match.data(match))
try(match.nn<- ESTIMATORS(Obs, pscore=Obs$distance)) ## Estimation
try(bal$match.nn.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.nn.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
bal$match.nn.W1
bal$match.nn.W2
library("MatchIt")
library("SuperLearner")
library("Matching")
library("tmle")
library("Hmisc")
# Make matrices to put the results in
all<-  data.frame( matrix(NA, nrow=1, ncol=8))
colnames(all)<- c('unadj', 'gcomp','iptw.ate.pnew','iptw.att.pnew','iptw.ate.pold','iptw.att.pold', 'tmle.pnew','tmle.pold')
match.full <- match.sub <- match.gen <- match.sl <- match.nn <- match.opt<- all
bal <- data.frame(matrix(NA,nrow=1, ncol=14))
colnames(bal)<-paste0( rep(c("all.","match.full.","match.sub.","match.gen.","match.sl.","match.nn.","match.opt."),each=2), rep(c("W1","W2"),7) )
# Take a random (representative) sample from the population
sample <- pop[sample(row.names(pop),size=ss, replace=F),]
##############
# 1. ANALYZE THE SAMPLE AS IS
############
all <- ESTIMATORS(sample, pscore=NA)
bal.all.W1 <- (mean(sample$W1[sample$A==1]) - mean(sample$W1[sample$A==0])) / sqrt((var(sample$W1[sample$A==1]) + var(sample$W1[sample$A==0])) / 2)
bal.all.W2 <- (mean(sample$W2[sample$A==1]) - mean(sample$W2[sample$A==0])) / sqrt((var(sample$W2[sample$A==1]) + var(sample$W2[sample$A==0])) / 2)
#############
# Different matching designs
# Match on W1 (percent black) and W2 (baseline violence)
# Keep default support
##############
#############
# 2. Nearest neighbor matching
# Analysis does not need to be weighted
#############
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="nearest")))
try(Obs <- match.data(match))
try(match.nn<- ESTIMATORS(Obs, pscore=Obs$distance)) ## Estimation
try(bal$match.nn.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.nn.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
#############
# 3. Optimal matching
# Analysis does not need to be weighted
#############
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="optimal")))
try(Obs <- match.data(match))
try(match.opt<- ESTIMATORS(Obs, pscore=Obs$distance))
try(bal$match.opt.W1 <- (mean(Obs$W1[Obs$A==1]) - mean(Obs$W1[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + var(Obs$W1[Obs$A==0])) / 2) )
try(bal$match.opt.W2 <- (mean(Obs$W2[Obs$A==1]) - mean(Obs$W2[Obs$A==0])) / sqrt((var(Obs$W2[Obs$A==1]) + var(Obs$W2[Obs$A==0])) / 2)  )
n=10000
R= 100
index <- 1:R
ss <- 1000
# Balance:
# Standardized mean difference = abs(mean treated-mean control) / SD pooled
# % of vars below 20%, 10%, 5%  SMD
# generate the population
pop <- generateData(n=n, covars.norm=T, pscore.type = 1)
results <- lapply(index, outer.loop, pop=pop)
i
r
R
head(results)
R <- 2
index <- 1:R
ss <- 1000
results <- lapply(index, outer.loop, pop=pop)
results
#############
match <- Obs <- NULL
try(match <- suppressWarnings(matchit(A ~ W1 + W2, data=sample, method="full")))
try(Obs <- match.data(match))
try(match.full<- ESTIMATORS.weighted(Obs, pscore=Obs$distance))
mean(Obs$W1[Obs$A==1])
weighted.mean(Obs$W1[Obs$A==0], w=Obs$weights[Obs$A==0])
var(Obs$W1[Obs$A==1])
wtd.var(Obs$W1[Obs$A==0], weights=Obs$weights[Obs$A==0])
(var(Obs$W1[Obs$A==1]) + wtd.var(Obs$W1[Obs$A==0], weights=Obs$weights[Obs$A==0]))
(var(Obs$W1[Obs$A==1]) + wtd.var(Obs$W1[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2
sqrt((var(Obs$W1[Obs$A==1]) + wtd.var(Obs$W1[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2)
(mean(Obs$W1[Obs$A==1]) - weighted.mean(Obs$W1[Obs$A==0], w=Obs$weights[Obs$A==0])) / sqrt((var(Obs$W1[Obs$A==1]) + wtd.var(Obs$W1[Obs$A==0], weights=Obs$weights[Obs$A==0])) / 2)
est <- matrix(NA,nrow=R,ncol=56)
balance <- matrix(NA,nrow=R,ncol=14)
for (r in 1:R) {
est[r,] <- as.numeric(results[[r]]$estimands)
balance[r,]  <- as.numeric(results[[r]]$bal)
}
est
balance
colnames(balance)<-paste0( rep(c("all.","match.full.","match.sub.","match.gen.","match.sl.","match.nn.","match.opt."),each=2), rep(c("W1","W2"),7) )
balance
results
colnames(balance)<-colnames(results[[r]]$bal)
balance
colnames(est)<-colnames(est[[r]]$bal)
est
est <- matrix(NA,nrow=R,ncol=56)
balance <- matrix(NA,nrow=R,ncol=14)
for (r in 1:R) {
est[r,] <- as.numeric(results[[r]]$estimands)
balance[r,]  <- as.numeric(results[[r]]$bal)
}
colnames(balance)<-colnames(results[[r]]$bal)
colnames(est)<-colnames(est[[r]]$estimands)
colnames(est)<-colnames(results[[r]]$estimands)
balance
est
MSE.funct<- function( X, Xtrue) {
ave=mean(X, na.rm=T)
bias=mean(X- Xtrue, na.rm=T)
var = var(X, na.rm=T)
MSE = mean( (X-Xtrue)^2, na.rm=T)
c(ave,bias, var, MSE)
}
###
# ATE
done.ate<- data.frame(apply(estimands, 2, MSE.funct, Xtrue=ATE))
row.names(done.ate)<- c('Ave', 'Bias', 'Var', 'MSE')
done.ate <- done.ate*10000
done.ate
done.att<- data.frame(apply(estimands, 2, MSE.funct, Xtrue=ATT))
row.names(done.att)<- c('Ave', 'Bias', 'Var', 'MSE')
done.att <- done.att*10000
done.att
balance
(as.numeric(abs(balance[,c(1,3,5,7,9,11,13)])<0.2) + as.numeric(abs(balance[,c(2,4,6,8,10,12,14)])<0.2))/2
abs(balance[,c(1,3,5,7,9,11,13)])
bal.collapsed <- balance[0,]
bal.collapsed
bal.collapsed <- matrix(NA,nrow=R,ncol=7*4)
bal.collapsed
colnames(bal.collapsed) <- paste(rep(c("all.","match.nn.","match.opt.","match.sl.","match.gen.","match.sub.","match.full."),each=4),c("percb20","percb10","percb5","percb1"))
bal.collapsed
colnames(bal.collapsed) <- paste0(rep(c("all.","match.nn.","match.opt.","match.sl.","match.gen.","match.sub.","match.full."),each=4),c("percb20","percb10","percb5","percb1"))
bal.collapsed
balance[,names(balance)==paste0(i,".W1")]
i <- "match.opt"
(as.numeric(abs(balance[,names(balance)==paste0(i,".W1")])<0.2) + as.numeric(abs(balance[,names(balance)==paste0(i,".W1")])<0.2))/2
balance[,names(balance)==paste0(i,".W1")]
balance
paste0(i,".W1")
names(balance)==paste0(i,".W1")
names(balance)
colnames(balance)==paste0(i,".W1")
balance[,colnames(balance)==paste0(i,".W1")]
(as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.2) + as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.2))/2
colnames(bal.collapsed)==paste0(i,".percb20")
bal.collapsed[,colnames(bal.collapsed)==paste0(i,".percb20")] <- (as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.2) + as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.2))/2
bal.collapsed
bal.collapsed <- matrix(NA,nrow=R,ncol=7*4)
colnames(bal.collapsed) <- paste0(rep(c("all.","match.nn.","match.opt.","match.sl.","match.gen.","match.sub.","match.full."),each=4),c("percb20","percb10","percb5","percb1"))
for (i in c("all","match.nn","match.opt","match.sl","match.gen","match.sub","match.full")) {
bal.collapsed[,colnames(bal.collapsed)==paste0(i,".percb20")] <- (as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.2) + as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.2))/2
bal.collapsed[,colnames(bal.collapsed)==paste0(i,".percb10")] <- (as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.1) + as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.1))/2
bal.collapsed[,colnames(bal.collapsed)==paste0(i,".percb5")] <-  (as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.05) + as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.05))/2
bal.collapsed[,colnames(bal.collapsed)==paste0(i,".percb1")] <-  (as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.01) + as.numeric(abs(balance[,colnames(balance)==paste0(i,".W1")])<0.01))/2
}
bal.collapsed
bal.collapsed <- apply(bal.collapsed, 2, function(x) colMeans(x,na.rm=T) )
bal.collapsed
class(bal.collapsed)
?apply
bal.collapsed <- apply(bal.collapsed, 2, function(x) colMeans(x,na.rm=T) )
?colMeans
bal.collapsed <- apply(bal.collapsed, 2, function(x) means(x,na.rm=T) )
bal.collapsed <- apply(bal.collapsed, 2, function(x) mean(x,na.rm=T) )
bal.collapsed
8+8+1+32+32+12
